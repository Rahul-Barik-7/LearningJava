üìò TYPE CASTING IN JAVA (DETAILED NOTES)
üîπ PART 1: PRIMITIVE TYPE CASTING
‚úÖ Definition

Primitive type casting in Java means converting one primitive data type into another.
There are 8 primitive data types:

Integral ‚Üí byte, short, int, long

Floating-point ‚Üí float, double

Character ‚Üí char

Boolean ‚Üí boolean (‚ö† not castable)

Primitive casting is of two types:

Widening (Upcasting) ‚Äì smaller ‚Üí larger (automatic)

Narrowing (Downcasting) ‚Äì larger ‚Üí smaller (manual, may lose data)

1) Widening (Upcasting)

‚û° Smaller data type is automatically converted into larger data type.
‚û° No data loss.

Conversion Hierarchy:
byte ‚Üí short ‚Üí int ‚Üí long ‚Üí float ‚Üí double

Example 1: byte ‚Üí short
public class ByteToShort {
    public static void main(String[] args) {
        byte b = 10;
        short s = b;   // automatic widening
        System.out.println("Byte value: " + b);
        System.out.println("Short value: " + s);
    }
}

Example 2: short ‚Üí int
public class ShortToInt {
    public static void main(String[] args) {
        short s = 200;
        int i = s;   // widening
        System.out.println("Short value: " + s);
        System.out.println("Int value: " + i);
    }
}

Example 3: int ‚Üí long
public class IntToLong {
    public static void main(String[] args) {
        int i = 50000;
        long l = i;   // widening
        System.out.println("Int value: " + i);
        System.out.println("Long value: " + l);
    }
}

Example 4: long ‚Üí float
public class LongToFloat {
    public static void main(String[] args) {
        long l = 100000L;
        float f = l;   // widening
        System.out.println("Long value: " + l);
        System.out.println("Float value: " + f);
    }
}

Example 5: float ‚Üí double
public class FloatToDouble {
    public static void main(String[] args) {
        float f = 12.34f;
        double d = f;   // widening
        System.out.println("Float value: " + f);
        System.out.println("Double value: " + d);
    }
}

2) Narrowing (Downcasting)

‚û° Larger data type is manually converted into smaller data type.
‚û° Done using type casting operator (type).
‚û° Data loss may occur.

Conversion Hierarchy (reverse):
double ‚Üí float ‚Üí long ‚Üí int ‚Üí short ‚Üí byte

Example 1: double ‚Üí float
public class DoubleToFloat {
    public static void main(String[] args) {
        double d = 99.99;
        float f = (float) d;   // explicit narrowing
        System.out.println("Double value: " + d);
        System.out.println("Float value: " + f);
    }
}

Example 2: float ‚Üí long
public class FloatToLong {
    public static void main(String[] args) {
        float f = 123.45f;
        long l = (long) f;   // explicit narrowing
        System.out.println("Float value: " + f);
        System.out.println("Long value: " + l);
    }
}

Example 3: long ‚Üí int
public class LongToInt {
    public static void main(String[] args) {
        long l = 100000L;
        int i = (int) l;   // explicit narrowing
        System.out.println("Long value: " + l);
        System.out.println("Int value: " + i);
    }
}

Example 4: int ‚Üí short
public class IntToShort {
    public static void main(String[] args) {
        int i = 32770;
        short s = (short) i;   // data loss
        System.out.println("Int value: " + i);
        System.out.println("Short value: " + s);
    }
}

Example 5: short ‚Üí byte
public class ShortToByte {
    public static void main(String[] args) {
        short s = 130;
        byte b = (byte) s;   // data loss
        System.out.println("Short value: " + s);
        System.out.println("Byte value: " + b);
    }
}

‚ùì Questions ‚Äì Primitive Casting

Q1. What is widening casting?
‚û° Smaller ‚Üí larger type, automatic, no data loss.

Q2. What is narrowing casting?
‚û° Larger ‚Üí smaller type, explicit, may lose data.

Q3. Why boolean is not castable?
‚û° Because true/false cannot be expressed as a number.

üîπ PART 2: NON-PRIMITIVE (OBJECT) TYPE CASTING
‚úÖ Definition

Non-primitive type casting means converting one object type into another within inheritance hierarchy.

1) Upcasting (Child ‚Üí Parent)

Implicit / Automatic.

Always safe.

Used to generalize objects.

class Animal {
    void sound() {
        System.out.println("Animal makes sound");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks");
    }
}

public class UpcastingExample {
    public static void main(String[] args) {
        Animal a = new Dog();   // Upcasting
        a.sound();              // Accessible
        // a.bark(); ‚ùå Not allowed
    }
}


Output:

Animal makes sound

2) Downcasting (Parent ‚Üí Child)

Explicit (manual).

Needed to access child-specific methods.

May cause ClassCastException if not valid.

class Animal {
    void sound() {
        System.out.println("Animal makes sound");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Dog barks");
    }
}

public class DowncastingExample {
    public static void main(String[] args) {
        Animal a = new Dog();        // Upcasting
        Dog d = (Dog) a;             // Downcasting
        d.sound();
        d.bark();
    }
}


Output:

Animal makes sound
Dog barks

3) Invalid Downcasting
class A {}
class B extends A {}
class C extends A {}

public class InvalidCasting {
    public static void main(String[] args) {
        A obj = new B();
        C c = (C) obj;   // ‚ùå Runtime error
    }
}


Output:

Exception in thread "main" java.lang.ClassCastException

‚ùì Questions ‚Äì Object Casting

Q1. What is upcasting in objects?
‚û° Assigning child object to parent reference.

Q2. What is downcasting in objects?
‚û° Assigning parent reference back to child reference.

Q3. Why do we use downcasting?
‚û° To access child-specific methods after upcasting.

‚úÖ Quick Summary

Primitive Casting:

Widening ‚Üí Automatic (safe)

Narrowing ‚Üí Manual (may lose data)

Examples: byte ‚Üí short ‚Üí int ‚Üí long ‚Üí float ‚Üí double

Non-Primitive Casting:

Upcasting ‚Üí Child ‚Üí Parent (automatic, safe)

Downcasting ‚Üí Parent ‚Üí Child (manual, may throw exception)